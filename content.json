{"meta":{"title":"废柴训练营","subtitle":"学习、交流、分享、成长","description":"不要脸，才能活的好","author":"pitou","url":"http://bksaas.com"},"pages":[{"title":"","date":"2017-12-09T14:14:35.000Z","updated":"2019-05-06T06:23:33.422Z","comments":true,"path":"about/index.html","permalink":"http://bksaas.com/about/index.html","excerpt":"","text":"关于我们的团队 一群来自全国各地的小伙伴，在一起打拼，贡献着自己的青春和热血，希望在忙碌之余，贡献几篇微不足道的文档，记录自己的成长，分享给大家，共同成长～"},{"title":"","date":"2017-12-09T15:42:38.000Z","updated":"2018-11-08T14:34:10.833Z","comments":true,"path":"categories/index.html","permalink":"http://bksaas.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-12-09T15:42:45.000Z","updated":"2018-11-08T14:34:10.849Z","comments":true,"path":"tags/index.html","permalink":"http://bksaas.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关于hexo博客的托管和配置","slug":"hexo","date":"2019-05-06T06:18:42.000Z","updated":"2019-05-06T06:47:01.164Z","comments":true,"path":"2019/05/06/hexo/","link":"","permalink":"http://bksaas.com/2019/05/06/hexo/","excerpt":"","text":"关于hexo博客的托管和配置一、 代码托管 托管到github 托管到coding 二、 分支结构 master分支：存放博客静态资源 hexo分支：存放博客的源码 三、 域名配置手上恰好有腾讯云的域名，分配两个域名给博客 coding绑定域名：blog.bksaas.com &ensp;&ensp;&ensp;&ensp;添加CNAME类型域名，指向：username.coding.me&ensp;&ensp;&ensp;&ensp;配置位置：代码 &gt; Pages 服务 &gt; 设置 &gt; 绑定新域名 github绑定域名：feichai.bksaas.com &ensp;&ensp;&ensp;&ensp;添加CNAME类型域名，指向：username.github.io&ensp;&ensp;&ensp;&ensp;配置位置：Settings &gt; GitHub Pages &gt; Custom domain","categories":[{"name":"hexo","slug":"hexo","permalink":"http://bksaas.com/categories/hexo/"}],"tags":[]},{"title":"sanic .","slug":"sanic","date":"2018-10-09T04:18:31.000Z","updated":"2018-11-08T14:34:10.833Z","comments":true,"path":"2018/10/09/sanic/","link":"","permalink":"http://bksaas.com/2018/10/09/sanic/","excerpt":"","text":"sanic中文：https://www.kancloud.cn/hiseh/sanic/543145code：https://github.com/hiseh/micspy/tree/master/test/sanichttps://github.com/gmaclinuxer/books/tree/master/Sanic%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97 https://sanic.readthedocs.io/en/latest/sanic/routing.html 路由： 支持变量，变量支持正则和类型匹配 支持请求方法限制 支持url反向解析（url_for） 路由的原始写法（add_route） 支持websocket路由 支持trailing slash设置及url命名设置 支持静态资源文件路由 https://sanic.readthedocs.io/en/latest/sanic/request_data.html Request： request.json request.args/request.raw_args/request.query_string request.url/ip/port/scheme/path request.files request.form request.body request.headers request.uri_template/token RequestParameters/get/getlist https://sanic.readthedocs.io/en/latest/sanic/response.html Response： Sanic.response. text/raw html json file/stream/file_stream redirect custom headers and status https://sanic.readthedocs.io/en/latest/sanic/static_files.html 静态资源：app.static/bp.static https://sanic.readthedocs.io/en/latest/sanic/exceptions.html 异常： 抛异常方式一：raise sanic.exceptions.ServerError 抛异常方式二：abort(401) 通过装饰器自定义异常捕捉：@app.exception(sanic.exceptions.NotFound) https://sanic.readthedocs.io/en/latest/sanic/middleware.html 中间件：app.middleware request类型和reponse类型中间件 修改request和response 在中间件中提前返回Response 监听者：app.listener before_server_start after_server_start before_server_stop after_server_stop 启动后台任务：app.add_task https://sanic.readthedocs.io/en/latest/sanic/blueprints.html 蓝图：子路由 大型应用中的路由拆分 bp.route bp.middleware bp.exception bp.static bp.listener 版本管理 url_prefix （for api versioning） https://sanic.readthedocs.io/en/latest/sanic/config.html Settings：app.config 类属性修改方式 字典方式-update 加载方式： 环境变量：Sanic(load_env=“TEST_”) 来自对象：from_object(conf.settings_development) 来自文件：from_envvar/from_pyfile https://sanic.readthedocs.io/en/latest/sanic/cookies.html Cookies： request.cookies.get response.cookies[‘xxx’] = ‘xxx’ delete response.cookies[‘xxx’] https://sanic.readthedocs.io/en/latest/sanic/logging.htmlhttps://www.kancloud.cn/hiseh/sanic/543145 日志：python3 logging api access_log log_config sanic.log.LOGGING_CONFIG_DEFAULTS loggers and format————————————————————— 装饰器：https://sanic.readthedocs.io/en/latest/sanic/decorators.html 流式请求和返回的支持：https://sanic.readthedocs.io/en/latest/sanic/streaming.html 类视图：https://sanic.readthedocs.io/en/latest/sanic/class_based_views.html HTTPMethodView add_route/as_view decorators CompositionView 自定义协议：https://sanic.readthedocs.io/en/latest/sanic/custom_protocol.html SSL支持：https://sanic.readthedocs.io/en/latest/sanic/ssl.html","categories":[],"tags":[]},{"title":"够浪基础篇","slug":"gobyexample","date":"2018-05-26T01:21:55.000Z","updated":"2018-11-08T14:34:10.845Z","comments":true,"path":"2018/05/26/gobyexample/","link":"","permalink":"http://bksaas.com/2018/05/26/gobyexample/","excerpt":"","text":"command-line-flags makefile https://gist.github.com/turtlemonvh/38bd3d73e61769767c35931d8c70ccb4 https://sohlich.github.io/post/go_makefile/ https://sahilm.com/makefiles-for-golang/ https://vincent.bernat.im/en/blog/2017-makefile-build-golang https://gist.github.com/subfuzion/0bd969d08fe0d8b5cc4b23c795854a13 go单元测试 https://jimmysong.io/go-practice/docs/go_unit_test.html https://www.jetbrains.com/help/go/run-debug-configuration-for-go-test.html https://github.com/cweill/gotests new vs make 静态代码检查","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://bksaas.com/tags/golang/"}]},{"title":"实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素","slug":"q-1","date":"2018-02-26T01:56:32.000Z","updated":"2018-11-08T14:34:10.829Z","comments":true,"path":"2018/02/26/q-1/","link":"","permalink":"http://bksaas.com/2018/02/26/q-1/","excerpt":"一、题目 题目：实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素 要求： 1.pop、push、getMin操作的时间复杂度都是O(1) 2.设计的栈类型可以使用现成的栈结构","text":"一、题目 题目：实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素 要求： 1.pop、push、getMin操作的时间复杂度都是O(1) 2.设计的栈类型可以使用现成的栈结构 二、思路&emsp;&emsp;双栈同入同出，浪费空间，但是思路简明直接 三、代码1. python123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109class MyStack(object): \"\"\" 解法一：双栈同入同出，浪费空间，但是思路简明直接 备注：这里使用的python列表具有栈的功能，支持pop操作 \"\"\" def __init__(self): self._stack = [] self._stk_min = [] def _peek(self, stk_list): \"\"\"获取栈顶元素，也就是列表最后一个元素\"\"\" return stk_list[len(stk_list) - 1] def peek(self): \"\"\"返回栈顶元素\"\"\" return self._peek(self._stack) def push(self, item): \"\"\" 双栈同入 入栈基本元素的同时，负责维护最小栈 \"\"\" # 栈为空，直接入栈当前元素 _stk_min_top = item if self._stk_min == [] else self._peek(self._stk_min) item_min = min(_stk_min_top, item) self._stk_min.append(item_min) self._stack.append(item) def pop(self): \"\"\" 双栈同出 \"\"\" if self.is_empty(): raise IndexError self._stk_min.pop() return self._stack.pop() def min(self): \"\"\" 获取栈内最小值 \"\"\" if self.is_empty(): raise IndexError return self._peek(self._stk_min) def size(self): \"\"\" 栈大小 \"\"\" return len(self._stack) def is_empty(self): \"\"\" 栈判空 \"\"\" # 这是个坑~ # return self._stack is [] return self._stack == [] def print_stack(self): \"\"\" 打印栈 \"\"\" try: print '&#123;&#125; --&gt; &#123;&#125; --&gt; &#123;&#125;'.format(self._stack, self._stk_min, self.min()) except IndexError: passif __name__ == '__main__': \"\"\" $ python q1_stack_getMin.py [84] --&gt; [84] --&gt; 84 [84, 93] --&gt; [84, 84] --&gt; 84 [84, 93, 87] --&gt; [84, 84, 84] --&gt; 84 [84, 93, 87, 79] --&gt; [84, 84, 84, 79] --&gt; 79 [84, 93, 87, 79, 65] --&gt; [84, 84, 84, 79, 65] --&gt; 65 [84, 93, 87, 79, 65, 15] --&gt; [84, 84, 84, 79, 65, 15] --&gt; 15 [84, 93, 87, 79, 65, 15, 67] --&gt; [84, 84, 84, 79, 65, 15, 15] --&gt; 15 [84, 93, 87, 79, 65, 15, 67, 1] --&gt; [84, 84, 84, 79, 65, 15, 15, 1] --&gt; 1 [84, 93, 87, 79, 65, 15, 67, 1, 54] --&gt; [84, 84, 84, 79, 65, 15, 15, 1, 1] --&gt; 1 [84, 93, 87, 79, 65, 15, 67, 1, 54, 64] --&gt; [84, 84, 84, 79, 65, 15, 15, 1, 1, 1] --&gt; 1 [84, 93, 87, 79, 65, 15, 67, 1, 54] --&gt; [84, 84, 84, 79, 65, 15, 15, 1, 1] --&gt; 1 [84, 93, 87, 79, 65, 15, 67, 1] --&gt; [84, 84, 84, 79, 65, 15, 15, 1] --&gt; 1 [84, 93, 87, 79, 65, 15, 67] --&gt; [84, 84, 84, 79, 65, 15, 15] --&gt; 15 [84, 93, 87, 79, 65, 15] --&gt; [84, 84, 84, 79, 65, 15] --&gt; 15 [84, 93, 87, 79, 65] --&gt; [84, 84, 84, 79, 65] --&gt; 65 [84, 93, 87, 79] --&gt; [84, 84, 84, 79] --&gt; 79 [84, 93, 87] --&gt; [84, 84, 84] --&gt; 84 [84, 93] --&gt; [84, 84] --&gt; 84 [84] --&gt; [84] --&gt; 84 \"\"\" import random s = MyStack() for i in range(10): s.push(random.randint(0, 100)) s.print_stack() while not s.is_empty(): s.pop() s.print_stack() 2. golang1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( \"gohome/go_deepin/common\" \"fmt\")type Stack struct &#123; s, _s common.Stack&#125;func (stack Stack) GetMin() (interface&#123;&#125;, error) &#123; return stack._s.Top()&#125;// 出栈func (stack *Stack) Pop() (interface&#123;&#125;, error) &#123; return stack.s.Pop()&#125;// 入栈func (stack *Stack) Push(value interface&#123;&#125;) &#123; stkTopValue, _ := stack._s.Top() if stkTopValue == nil || stkTopValue.(int) &gt; value.(int) &#123; stack._s.Push(value) &#125; else &#123; stack._s.Push(stkTopValue) &#125; stack.s.Push(value)&#125;func main() &#123; var myStack Stack var arr = []int&#123; 10, 23, 9, 21, 5, 6, 8, 3, 2, 43, 5, &#125; for _, v := range (arr) &#123; myStack.Push(v) &#125; //for _, v1 := range (myStack._s) &#123; // fmt.Println(v1) //&#125; fmt.Println(myStack.GetMin())&#125;","categories":[{"name":"每日一练","slug":"每日一练","permalink":"http://bksaas.com/categories/每日一练/"}],"tags":[{"name":"刷题","slug":"刷题","permalink":"http://bksaas.com/tags/刷题/"}]},{"title":"git提交规范","slug":"git-cimmit-standard","date":"2018-01-12T20:30:18.000Z","updated":"2018-11-08T14:34:10.825Z","comments":true,"path":"2018/01/13/git-cimmit-standard/","link":"","permalink":"http://bksaas.com/2018/01/13/git-cimmit-standard/","excerpt":"","text":"feat -&gt; 特性 fix -&gt; 修bug refactor -&gt; 重构 test -&gt; 测试 perf -&gt; 性能提升 style -&gt; 微调 docs -&gt; 文档 conflict -&gt; 解决冲突 chore -&gt; 更改核心模块 参考列表： https://www.zhihu.com/question/21209619 http://karma-runner.github.io/2.0/dev/git-commit-msg.html https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit# http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html http://commitizen.github.io/cz-cli/","categories":[{"name":"git","slug":"git","permalink":"http://bksaas.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://bksaas.com/tags/git/"}]},{"title":"Mysql主从复制","slug":"mysql-master-slave","date":"2018-01-03T08:22:38.000Z","updated":"2018-11-08T14:34:10.837Z","comments":true,"path":"2018/01/03/mysql-master-slave/","link":"","permalink":"http://bksaas.com/2018/01/03/mysql-master-slave/","excerpt":"主从复制原理图，暂时借用自图片出处 一. 实验环境&emsp;&emsp;采用Vagrant搭建mysql集群，这里配置三台mysql服务器，操作系统为Centos7","text":"主从复制原理图，暂时借用自图片出处 一. 实验环境&emsp;&emsp;采用Vagrant搭建mysql集群，这里配置三台mysql服务器，操作系统为Centos71.Vagrantfile配置如下： 1234567891011121314151617181920212223242526272829303132# -*- mode: ruby -*-# vi: set ft=ruby :# 1..3，根据需要修改Vagrant.configure(\"2\") do |config| (1..3).each do |i| config.vm.define \"mysql#&#123;i&#125;\" do |node| # 设置虚拟机的Box，根据需要修改 node.vm.box = \"centos7\" # 设置虚拟机的主机名 node.vm.hostname=\"mysql#&#123;i&#125;\" # 设置虚拟机的IP node.vm.network \"private_network\", ip: \"192.168.1.1#&#123;i&#125;\" # 设置主机与虚拟机的共享目录，根据需要开启 # config.vm.synced_folder \"C:\\\\ssd\", \"/ssd\" # VirtaulBox相关配置 node.vm.provider \"virtualbox\" do |v| # 设置虚拟机的名称 v.name = \"mysql#&#123;i&#125;\" # 设置虚拟机的内存大小，根据需要修改 v.memory = 768 # 设置虚拟机的CPU个数 v.cpus = 1 end # 使用shell脚本进行软件安装和配置 node.vm.provision \"shell\", inline: &lt;&lt;-SHELL echo 'do something' SHELL end endend 2.主机角色如下: master 192.168.1.11 mysql1 slave 192.168.1.12 mysql2 slave 192.168.1.13 mysql3 3.启动后我们登录mysql1，也就是192.168.1.11，安装mariadb(兼容mysql)，版本为5.5.56 1234567yum install mariadb-server mariadb -yyum list|grep mariadbmariadb.x86_64 1:5.5.56-2.el7 @base mariadb-libs.x86_64 1:5.5.56-2.el7 @base mariadb-server.x86_64 1:5.5.56-2.el7 @base ... 4.关闭防火墙，清空iptables，避免策略问题给实验带来不必要的干扰 123456789101112[root@mysql1 vagrant]# iptables -F[root@mysql1 vagrant]# iptables -X[root@mysql1 vagrant]# iptables -L -nChain INPUT (policy ACCEPT)target prot opt source destination Chain FORWARD (policy ACCEPT)target prot opt source destination Chain OUTPUT (policy ACCEPT)target prot opt source destination [root@mysql1 vagrant]# 二. 配置master1.设置root账户的密码（可选） 12345# 方法一mysql_secure_installation# 方法二update mysql.user set password=PASSWORD(&apos;root&apos;) where user=&apos;root&apos;; 2.登录mysql 123456# 帐号密码登录（设置过root密码）mysql -uroot -proot# 直接登录（没有设置root密码）mysql 3.授权slave访问master 12grant replication slave, replication client on *.* to slave@'%' identified by 'slave';flush privileges; 4.增加master相关配置 这里，我们参考mariadb安装包自带的配置文件: 12345678[root@mysql1 vagrant]# ls /usr/share/mysql/|grep cnfmy-huge.cnfmy-innodb-heavy-4G.cnfmy-large.cnfmy-medium.cnfmy-small.cnfREADME.mysql-cnf[root@mysql1 vagrant]# 根据mariadb的配置建议，我们把master的配置文件单独放到/etc/my.cnf.d/目录下，简单配置如下： 123456789101112cat &gt; /etc/my.cnf.d/mysql-master.cnf &lt;&lt; EOF[mysqld]log-bin=mysql-binbinlog_format=mixed# required unique id between 2 and 2^32 - 1server-id= 1# sync table listbinlog-do-db = test,demodb# ignore table listbinlog-ignore-db=mysqlbinlog-ignore-db=information_schemaEOF 接着，我们重启mariadb并查看master配置效果 123456789101112131415[root@mysql1 vagrant]# systemctl restart mariadb[root@mysql1 vagrant]# systemctl status mariadbmariadb.service - MariaDB database server Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled)...1月 03 17:56:32 mysql1 mysqld_safe[4511]: 180103 17:56:32 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql1月 03 17:56:34 mysql1 systemd[1]: Started MariaDB database server.MariaDB [(none)]&gt; show master status;+------------------+----------+--------------+--------------------------+| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+--------------------------+| mysql-bin.000006 | 245 | test,demodb | mysql,information_schema |+------------------+----------+--------------+--------------------------+1 row in set (0.00 sec) 请记住File和Position，这两个字段会在后面slave的配置中用到. 三. 配置slave从5.5版本的官方文档得知，在slave中不需要配置master相关信息: https://dev.mysql.com/doc/refman/5.5/en/replication-options-slave.html The following options are removed in MySQL 5.5. If you attempt to start mysqld with any of these options in MySQL 5.5,the server aborts with an unknown variable error. To set the replication parameters formerly associated with these options,you must use the CHANGE MASTER TO … statement (see Section 13.4.2.1, “CHANGE MASTER TO Syntax”). The options affected are shown in this list:–master-host–master-user–master-password–master-port… 如果配置了反而会出错： /usr/libexec/mysqld: unknown variable ‘master-host=192.168.1.11’ 1.这里我们以mysql2的配置为例，首先登录mysql2，然后增加slave配置： 12345678vagrant ssh mysql2cat &gt; /etc/my.cnf.d/mysql-slave.cnf &lt;&lt; EOF[mysqld]# 不能和master或者其他slave冲突，这里也可用ip来充当server_idserver-id= 2EOF 2.创建需要从master复制的db: 1create database demodb; 3.登录mysql并为slave指定master信息: 123456789101112131415161718192021mysql -uroot -proot# 先停掉工作线程slave stop# 方式一：不指定binlog和logpos# CHANGE MASTER TO MASTER_HOST='192.168.1.11',MASTER_PORT=3306,MASTER_USER='slave',MASTER_PASSWORD='slave';# 方式二：建议指定binlog和logpos，也就是上文提到的File和PositionCHANGE MASTER TO MASTER_HOST='192.168.1.11', MASTER_USER='slave', MASTER_PASSWORD='slave', MASTER_PORT=3306, MASTER_LOG_FILE='mysql-bin.000006', MASTER_LOG_POS=245, MASTER_CONNECT_RETRY=10; # 启动工作线程slave start 4.查看slave的状态 123456789101112131415161718192021MariaDB [(none)]&gt; show slave status\\G;*************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.1.11 Master_User: slave Master_Port: 3306 Connect_Retry: 10 Master_Log_File: mysql-bin.000006 Read_Master_Log_Pos: 245 Relay_Log_File: mariadb-relay-bin.000002 Relay_Log_Pos: 529 Relay_Master_Log_File: mysql-bin.000006 Slave_IO_Running: Yes Slave_SQL_Running: Yes... Master_Server_Id: 11 row in set (0.00 sec)ERROR: No query specifiedMariaDB [(none)]&gt; 重点关注：Slave_IO_Running: Yes和Slave_SQL_Running: Yes说明slave复制线程已经开始工作，此时我们可以看到，指定的db已经同步过来了： 123456789101112131415161718192021222324252627282930313233343536MariaDB [demodb]&gt; show tables;+---------------------------------+| Tables_in_demodb |+---------------------------------+...| django_site |...| home_application_author || home_application_publisher |+---------------------------------+24 rows in set (0.00 sec)# 在master中向django_site插入数据，然后到slave中查看很快同步过来MariaDB [demodb]&gt; select * from django_site;+----+-------------+-------------+| id | domain | name |+----+-------------+-------------+| 1 | example.com | example.com || 2 | test | test || 3 | test1 | test1 || 4 | test | test || 5 | test | test |+----+-------------+-------------+5 rows in set (0.00 sec)MariaDB [demodb]&gt; show processlist;+----+-------------+-----------+--------+---------+------+-----------------------------------------------------------------------------+------------------+----------+| Id | User | Host | db | Command | Time | State | Info | Progress |+----+-------------+-----------+--------+---------+------+-----------------------------------------------------------------------------+------------------+----------+| 11 | root | localhost | demodb | Query | 0 | NULL | show processlist | 0.000 || 12 | system user | | NULL | Connect | 391 | Waiting for master to send event | NULL | 0.000 || 13 | system user | | NULL | Connect | 391 | Slave has read all relay log; waiting for the slave I/O thread to update it | NULL | 0.000 |+----+-------------+-----------+--------+---------+------+-----------------------------------------------------------------------------+------------------+----------+3 rows in set (0.00 sec) &emsp;&emsp;两台slave采用相同的方式配置，注意server-id不能重复即可，通过前面的设置，即可实现一个master和多个slave的主从复制功能.","categories":[{"name":"mysql","slug":"mysql","permalink":"http://bksaas.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://bksaas.com/tags/mysql/"},{"name":"主从复制","slug":"主从复制","permalink":"http://bksaas.com/tags/主从复制/"}]},{"title":"vim精简配置","slug":"vim-basic-1","date":"2018-01-03T02:55:40.000Z","updated":"2018-11-08T14:34:10.829Z","comments":true,"path":"2018/01/03/vim-basic-1/","link":"","permalink":"http://bksaas.com/2018/01/03/vim-basic-1/","excerpt":"vim ~/.vimrcvim的配置内容特别多，这里值保留最精简的配置： 1234567syntax onset numberset tabstop=4set expandtabset bg=lightset pastecolor murphy","text":"vim ~/.vimrcvim的配置内容特别多，这里值保留最精简的配置： 1234567syntax onset numberset tabstop=4set expandtabset bg=lightset pastecolor murphy","categories":[{"name":"vim","slug":"vim","permalink":"http://bksaas.com/categories/vim/"}],"tags":[{"name":"vim配置","slug":"vim配置","permalink":"http://bksaas.com/tags/vim配置/"}]},{"title":"Vagrant搭建集群环境","slug":"vagrant-cluster","date":"2018-01-03T01:07:08.000Z","updated":"2018-11-08T14:34:10.825Z","comments":true,"path":"2018/01/03/vagrant-cluster/","link":"","permalink":"http://bksaas.com/2018/01/03/vagrant-cluster/","excerpt":"1. 安装vagrant和virtualbox自行解决 2. 安装box文件根据需要下载centos或者ubuntu的vbox镜像，并添加到系统中，例如： vagrant box add alpha xxx.box vagrant box add centos centos.box vagrant box add xxx.box 3. 创建目录并初始化vagrantvagrant init","text":"1. 安装vagrant和virtualbox自行解决 2. 安装box文件根据需要下载centos或者ubuntu的vbox镜像，并添加到系统中，例如： vagrant box add alpha xxx.box vagrant box add centos centos.box vagrant box add xxx.box 3. 创建目录并初始化vagrantvagrant init 4. 修改Vagrantfile123456789101112131415161718192021222324252627282930313233# -*- mode: ruby -*-# vi: set ft=ruby :# 1..3，根据需要修改Vagrant.configure(&quot;2&quot;) do |config| (1..3).each do |i| config.vm.define &quot;node#&#123;i&#125;&quot; do |node| # 设置虚拟机的Box，根据需要修改 node.vm.box = &quot;base&quot; # 设置虚拟机的主机名 node.vm.hostname=&quot;node#&#123;i&#125;&quot; # 设置虚拟机的IP node.vm.network &quot;private_network&quot;, ip: &quot;192.168.12.#&#123;i&#125;&quot; # 设置主机与虚拟机的共享目录，根据需要开启 # config.vm.synced_folder &quot;C:\\\\ssd&quot;, &quot;/ssd&quot; # VirtaulBox相关配置 node.vm.provider &quot;virtualbox&quot; do |v| # 设置虚拟机的名称 v.name = &quot;node#&#123;i&#125;&quot; # 设置虚拟机的内存大小，根据需要修改 v.memory = 768 # 设置虚拟机的CPU个数 v.cpus = 1 end # 使用shell脚本进行软件安装和配置 node.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL # sudo apt-get update echo &apos;do something&apos; SHELL end endend 启动集群1vagrant up 进入各虚拟机1vagrant ssh node1/node2/node3","categories":[{"name":"vagrant","slug":"vagrant","permalink":"http://bksaas.com/categories/vagrant/"}],"tags":[{"name":"vagrant","slug":"vagrant","permalink":"http://bksaas.com/tags/vagrant/"}]}]}